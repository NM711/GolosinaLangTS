module main;
# Expression Examples

const x = clone Object {
	number = 10,
	another = "Hello",
	callme = method () {
		let x = 500;
		return x;
	}
};

# let y = x->callme();

# fmt->log(y);

const operation = clone Object {
	loop = method () {
		for (let i = 0; i < 10; ++i) {
			fmt->log(i);

			if (i <= 5) {
				fmt->log("Hello");
				continue;
			};
	
			fmt->log("GreaterThan 5");
	
			if (i == 6) {
				fmt->log("i is equal to 6!");
				fmt->log("Something cool: ", i);
				return i;
			};
		};
	},
	vec1 = containers->vector(10),
	populate = method () {
		this->vec1->push(123);	
	}
};

operation->populate();

# Inheritance, This is Very Gaymer
# As a personal note, I dont really like how some native objects are created implicitly under the hood, such as vector.
# For example when you call containers->vector, "create" is called under the hood. Might not do that, depends on how I feel
# WUAHAHAHAHAHAHAHA

const inherited = clone operation {};

fmt->log("INHERITED WUAUAUAUA: ", inherited->vec1);
fmt->log("BASE OBJECT: ", operation->vec1);

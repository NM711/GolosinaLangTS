export enum TokenIdentifiers {
  LET,
  CONST,
  METHOD,
  FOR,
  WHILE,
  IF,
  ELSE,
  RETURN,
  CASE,
  OF,
  DEFAULT,
  BREAK,
  CONTINUE,
  IDENT,
  CLONE,
  BOOLEAN,
  NULL,
  FLOAT,
  INTEGER,
  STRING,
  VOID,
  BOOLEAN_LITERAL,
  STRING_LITERAL,
  INTEGER_LITERAL,
  FLOAT_LITERAL,
  BINARY_DIVISION,
  BINARY_MULTIPLICATION,
  BINARY_MODULUS,
  BINARY_ASSIGNMENT,
  BINARY_ADDITION,
  BINARY_SUBTRACTION,
  BINARY_GT,
  BINARY_GT_EQ,
  BINARY_LT,
  BINARY_LT_EQ,
  BINARY_EQUALITY,
  BINARY_NOT_EQUALITY,
  BINARY_AND,
  BINARY_OR,
  UNARY_NOT,
  UNARY_INCREMENT,
  UNARY_DECREMENT,
  AMPERSAND,
  PIPE,
  ARROW,
  SEMICOLON,
  SEPERATOR,
  COLON,
  LEFT_CURLY,
  RIGHT_CURLY,
  LEFT_PARENTHESIS,
  RIGHT_PARENTHESIS, 
};

export type LinePosition = {
  char: number;
  line: number;
};

export type Token = {
  id: TokenIdentifiers;
  lexeme: string;
  info: LinePosition;
};

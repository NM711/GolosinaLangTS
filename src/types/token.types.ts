export enum InfoUpdateType {
  START,
  END
};

export enum LexerState {
  S_REJECT,
  S_C_REJECT,
  S_TERMINATE,
  S_INITIAL,
  S_COMMENT,
  S_STRING,
  S_IDENTIFIER,
  S_INT,
  S_INT_PERIOD,
  S_FLOAT,
  S_PLUS,
  S_MINUS,
  S_EQUAL,
  S_SLASH,
  S_STAR,
  S_DOLLAR,
  S_PERCENT,
  S_EXCLAMATION,
  S_LEFT_ANGLE,
  S_RIGHT_ANGLE,
  S_AMPERSAND,
  S_PIPE
};

export enum TokenIdentifiers {
  // keywords
  EOF_T,
  LET,
  CONST,
  METHOD,
  IF,
  ELSE,
  CASE,
  OF,
  DEFAULT,
  CONTINUE,
  BREAK,
  RETURN,
  FOR,
  WHILE,
  CLONE,
  MODULE,
  IMPORT,
  EXPORT,
  IDENT,

  // literals
  STRING_LITERAL,
  NULL_LITERAL,
  INTEGER_LITERAL,
  FLOAT_LITERAL,
  BOOLEAN_LITERAL,

  // symbols

  PLUS_SYMB,
  MINUS_SYMB,
  EXPONENTIAL_SYMB,
  STAR_SYMB,
  SLASH_SYMB,
  STAR_EQ_SYMB,
  SLASH_EQ_SYMB,
  PERCENTAGE_EQ_SYMB,
  PLUS_EQ_SYMB,
  MINUS_EQ_SYMB,
  PERCENTAGE_SYMB,
  AMPERSAND_SYMB,
  COMMA_SYMB,
  PIPE_SYMB,
  DOLLAR_SYMB,
  GT_SYMB,
  GT_EQ_SYMB,
  LT_SYMB,
  LT_EQ_SYMB,
  EQUAL_SYMB,
  EXCLMATION_SYMB,
  ARROW_SYMB,
  SEMICOLON_SYMB,
  LEFT_ANGLE_BRACKET_SYMB,
  LEFT_ANGLE_BRACKET_EQ_SYMB,
  RIGHT_ANGLE_BRACKER_SYMB,
  RIGHT_ANGLE_BRACKET_EQ_SYMB,
  LEFT_PARENTHESIS_SYMB,
  RIGHT_PARENTHESIS_SYMB,
  LEFT_CURLY_SYMB,
  RIGHT_CURLY_SYMB,

  UNARY_INCREMENT,
  UNARY_DECREMENT,
  BINARY_EQUALITY,
  BINARY_INEQUALITY,
  BINARY_AND,
  BINARY_OR,
  DOLLAR_LEFT_ANGLE_BRACKET_SYMB,
};
